import pandas as pd
from scipy.io import arff
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Load ARFF Dataset
def load_arff(file_path):
    data, meta = arff.loadarff(file_path)
    df = pd.DataFrame(data)
    # Decode bytes to string if necessary
    for column in df.columns:
        if df[column].dtype == object:
            df[column] = df[column].str.decode('utf-8')
    return df

# Perform K-Means Clustering
def kmeans_clustering(df, n_clusters):
    scaler = StandardScaler()
    X = scaler.fit_transform(df.select_dtypes(include=[float, int]))
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    kmeans.fit(X)
    df['Cluster'] = kmeans.labels_
    return df, kmeans

# Plotting the clusters
def plot_clusters(df, x_col, y_col):
    plt.scatter(df[x_col], df[y_col], c=df['Cluster'], cmap='viridis')
    plt.title(f"K-Means Clustering ({x_col} vs {y_col})")
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.show()

# Clustering and plotting for IRIS Dataset
def iris_clustering():
    df = load_arff('iris.arff')
    clustered_df, model = kmeans_clustering(df, 3)
    print(clustered_df.head())
    plot_clusters(clustered_df, 'sepallength', 'sepalwidth')

# Clustering and plotting for STUDENT Dataset
def student_clustering():
    df = load_arff('student.arff')
    clustered_df, model = kmeans_clustering(df, 2)
    print(clustered_df.head())
    plot_clusters(clustered_df, df.columns[0], df.columns[1])

# Example usage:
# iris_clustering()
# student_clustering()
